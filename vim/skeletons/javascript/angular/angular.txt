*******************************************************************************************
angular

*most used
*property binding vs string interpolation
*event binding
*two way data binding
*directives


*******************************************************************************************
*******************************************************************************************
*most used

  {{ }}         =>    <div>{{ tsValue }}</div>
  [(ngModel)]   =>    <input type="text" [(ngModel)]="variableName">
  (click)       =>    <button (click)="myFunction()">click</button>
  (input)       =>    <input type="text" (input)="methodName($event)">
                        methodName(event: Event) { 
                          (<HTMLInputElement>event.target).value; 
                        }
  *ngFor        =>    <div *ngFor="let ___ of ___s"></div>
  *ngFor (index)=>    <div *ngFor="let ___ of ___s; let i = index">index: {{ i }}</div>
  *ngIf         =>    <div *ngIf="boolean"></div>
  *ngIf (else)  =>    <div *ngIf="boolean; else hashName"></div>
                      <ng-template #hashName>
                        <div>content</div>
                      </ng-template>
  [ngClass]     =>    <div [ngClass]="{'class_name': boolean}"></div>
  [ngStyle]     =>    <div [ngStyle]="{'background-color': getColor()}"></div>
  [disabled]    =>    [disabled]="true"
  [innerText]   =>    <p [innerText]="dataString"></p>


*******************************************************************************************
*property binding vs string interpolation

  two ways of rendering data from the .component.ts file to the .component.html file
    property binding     => []     can be used to change html properties
    string interpolation => {{ }}  usually used for inserting a string of text

    it is better not to mix the two (for the same expression)

    // <component name>.component.ts file

      export class ServersComponent implements OnInit {
        dataString = 'sample string';

        ngOnInit() {
        }
      }

    // <component name>.component.html file

      <p [innerText]="dataString"></p>      => using data binding approach
      <p>{{ dataString }}</p>               => using data binding approach

*******************************************************************************************
*event binding
  
  instead of using
  <button onclick="myFunction()">Click me</button>

  example
    <button (click)="myFunction()">click</button>

    or

    <input type="text"
           (input)="onUpdateServerName($event)">    // $event allows you to pass the value of the text input

    onUpdateServerName(event: Event) {
      this.serverName = (<HTMLInputElement>event.target).value;  // $event.target.value can access the input value
    }                                                            // it is necessary to specify the HTMLInputElementType


*******************************************************************************************
*two way data binding

  binding in both directions
  combines property and event binding

  with angular 4 you need to update the app/app.module.ts file with the following two lines

  import { FormsModule }   from '@angular/forms'; 
  SignupFormComponent
      |-> goes after AppComponent,

  <input type="text"
         class="form-control"
         [(ngModel)]="serverName">

    the serverName is updateded automatially allowing it to be called on the page with string interpolation
      {{ serverName }}         

    it will also update it on the server side .ts code (two ways)
      //<component name>.component.ts
        serverName = '';   // will be updated to the binded value from the input tag


*******************************************************************************************
*directives
  
  instructions in the DOM

  attribute directives = look just like noramal html attributes, 
                         they onlychange the appearence of current attributes
  structural directives => actually add or remove elements ( *ngIf="" )


  example of ngStyle attribute directive
    [ngStyle]="{css goes here}"  => ngStyle is a directive name
                                    [] is property binding (the two are not exclusive)
                                      you create bindings to properties of directives (ngStyle is a directive)

    <p [ngStyle]="{'background-color': 'green'}">words go here<p>     // wrap with quotations
    <p [ngStyle]="{backgroundColor: 'green'}">words go here<p>        // camel case example

    <p [ngStyle]="{'background-color': getColor()}">words go here<p>  // the style property values can also be methods


  example [ngClass]
    [ngClass] adds a css class if a certain condition is true

    [ngClass]="{'class-name': serverStatus === 'online'}"> 
      // serverStatus === 'online' can be replaced with a function



  example of *ngIf="" (structural directive)

    // component.html file

      <input type="text"
             [(ngModel)]="serverName">
             
      <button (click)="onCreateServer()">add server</button>
      
      <p *ngIf="serverCreated">Server was created. Server Name : {{ serverName }}</p>  
                               // if "serverCreated" is true then the <p> will appear

    // component.ts file (inside export class)

      serverName = '';
      serverCreated = false;

      onCreateServer() {
        serverCreated = true;
      }


    there is also an if else option but requires angular 4

      <p *ngIf="serverCreated; else noServer">Server name is : {{ serverName }}</p>
      <ng-template #noServer>
        <p>No current servers</p>
      </ng-template>

      
  example of *ngFor="" (structural directive)
    loops over an array of elements and creates a element for each array

    // servers.component.html 

      <input type="text"
             [(ngModel)]="serverName">

      <button (click)="createServer()">add server</button>
      <app-server *ngFor="let server of servers"></app-server>

      // you can also access the index of a let iteration
      <app-server *ngFor="let server of servers; let i = index"></app-server>

    // servers.component.ts

      servers = ['element1', 'element2', 'element3']; 

      createServer() {
        this.servers.push(this.serverName)
        this.serverCreated = true;
      }
          


