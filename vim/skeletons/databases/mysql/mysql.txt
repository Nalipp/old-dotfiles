*******************************************************************************************
SQL
*******************************************************************************************
  start mysql
    echo 'export PATH=$PATH:/usr/local/mysql/bin' >> ~/.bash_profile
    mysql -u root --password
    b*********

    turn off strict setting (allows you to truncate data instead of throw an error)
    SET @@global.sql_mode= '';     // inside the mysql shell

    sql formater
      http://www.sql-format.com/     

*open questions
*example queries
*database general notes
*creating tables
*inserting data
*CRUD
*working with files
*string functions
*aggregate functions



*******************************************************************************************
*open questions

  IfNull()
  Round()
  Avg()
  Count()
  CASE
    WHEN THEN ''
    WHEN THEN ''
    ELSE ''
  end


*******************************************************************************************
example queries

    play area and sample data
    https://www.w3schools.com/sql/trysql.asp?filename=trysql_op_or

  help;
  show databases;
  CREATE DATABASE <name>;
  DROP DATABASE <name>;
  USE <name>;
  SELECT database();         // show what database you are using

  SELECT * FROM products 
  ORDER BY price DESC;
  SUM(Quantity) AS "Quantity"
  WHERE
    SELECT * FROM users WHERE AGE >= 18;

  joins
    SELECT customerName,
           COUNT(*) AS 'number of orders'
    FROM customers
    INNER JOIN orders
          ON orders.customerID = customers.customerID
    GROUP BY customers.customerID;


    SELECT SupplierName, SUM(Price * Quantity) AS 'total quantity' FROM Products
    INNER JOIN OrderDetails
      ON Products.ProductID = OrderDetails.ProductID
    INNER JOIN Suppliers
      ON Products.SupplierID = Suppliers.SupplierID
    GROUP BY ProductName


  SELECT CONCAT(author_fname, ' ', author_lname) AS author, SUM(pages) AS 'total pages'
  FROM books
  GROUP BY author_fname, author_lname
  ORDER BY SUM(pages) DESC;


*******************************************************************************************
*database general notes

  database vs database managment system (DBMS)

    A database is like a file on your computer that you can retrieve but is difficult to manipulate the data
    a database managment system is a an interface that allows you to manipulate the data in a database
      when people talk about databases they usually refer to the two together


  MySql vs SQL
    MySql is a DMBS that has different features as other DMBS (PostgreSql, SqLite etc)
      these differences can be related to speed, security, the size of the download, user permissions etc
    SQL is the lanauge used to talk to the database and used across all the relational DMBS

  Installing
    setting up MySql on CloudNine workspace
      three commands
        mysql-ctl start  installs and creates an empty database (sql runs constantly in the background)
        mysql-ctl stop   not usually necessary to stop
        mysql-ctl cli    runs an interactive shell
                         to exit the shell => eixt; quit; \q; ctrl-c

    installing on mac

    go to the website and install the latest version and copy and save the password for later
      root@localhost: mvo>Xx5(yCdo

    set the bash file path 
      $ export PATH=$PATH:/usr/local/mysql/bin

      $ open ./.bashrc
        (place in bash)
        echo 'export PATH=$PATH:/usr/local/mysql/bin' >> ~/.bash_profile

    entering and change the password

      $ mysql -u root --password
        enter instalation password

      (change the password in the command shell)
      ALTER USER 'root'@'localhost' IDENTIFIED BY 'b*********';


  
*******************************************************************************************
*creating tables

  table columns => headers
  table rows    => data rows

  creating tables 
    CREATE TABLE <table name>
      (
        column_name data_type,
        column_name data_type
      );


    SHOW TABLES;
    SHOW COLUMNS FROM <table name>;
    DESC <table name>;               // same as SHOW COLUMNS FROM, stands for describe
    DROP TABLE <table name>;


    data types
       INT(11)      => positive or negative numbers no decimals  (max value 4.2 billion)
       VARCHAR(100) => a string with specified length between 1 and 255 characters (can also be a string of numbers)
                       if more than 100 characters are input then only the first 100 will be stored

    NULL and NOT NULL
      NULL does not mean zero it means unknown
        if NULL is set to yes in the schema(this is by default), inputs are permited to be blank
        inputs left blank will evaluate to NULL in the database

      NOT NULL (prevents you from inserting NULL, empty insert will result in default only if it is changed from NULL)
        example 
        CREATE TABLE cats; ( name VARCHAR(20) NOT NULL,
            age INT NOT NULL
          );


    DEFAULT VALUES (value used when an insert is empty, it is set to NULL automatically but can be specified)
      CREATE TABLE cats; 
        (
          name VARCHAR(20) DEFAULT 'unnamed',
          age INT DEFAULT 99 
        );

    You may want to add both NOT NULL and DEFAULT '' if you want to prevent the insertion of NULL manually


    PRIMARY KEY

      example
        CREATE TABLE users 
        (
          user_id INT NOT NULL AUTO_INCREMENT,
          email VARCHAR(255) NOT NULL,
          password VARCHAR(255) NOT NULL,
          PRIMARY KEY(user_id)
        );

      alternate way to do primary key
        CREATE TABLE users
        (
          user_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
          email VARCHAR(255),
          password VARCHAR(255) NOT NULL
        );


*******************************************************************************************
*inserting data

  INSERT INTO <table name>(column_name1, column_name2)
  VALUES (value1, value2);

  INSERT INTO <table name>(column_name1, column_name2) 
  VALUES (value1, value2), 
         (value1, value2), 
         (value1, value2);

  warnings
    sometimes after inserting data you will recieve a warning
    this may happen if the data is too long (and was automatically truncated)
    to inspect the warning use 
    SHOW WARNINGS;


*******************************************************************************************
*CRUD

  CREATE => INSERT INTO <table name>(column_name) VALUES('value');
  READ   => SELECT
  UPDATE => UPDATE
  DELETE => DELETE

  *recomendation => before you update or delete run the where clause as practice 
                    to visually confirm you are going to select the correct data


  SELECT

    WHERE
      SELECT * FROM <table name> WHERE id=4;     // where arguments are not case sensitive
      SELECT * FROM users WHERE password=name;   // arguments can also be other columns 
      SELECT * FROM users WHERE user_id-5        // selects everything except user_id 5

    Aliasis
      SELECT user_id AS id FROM users;
     
  UPDATE

    UPDATE users SET name='unnamed'
    WHERE name=NULL;

  DELETE
    
    DELETE FROM users WHERE user_id=4;
    DELETE FROM users;                           // deletes all users without deleting the tabl e

*******************************************************************************************
*working with files

  files must end with .sql

  example (run file in mysql shell)
    source file_name.sql


*******************************************************************************************
*string functions

  CONCAT (useful for adding comma seperated values)
    SELECT CONCAT(first_name, ' ', middle_name, ' ', last_name) 
    AS 'full name' FROM books;                    // combine multiple rows into one 

    SELECT CONCAT_WS(' ', first_name, middle_name, last_name) 
    AS 'full name' FROM books;                    // combine multple rows and re-use the seperator

  SUBSTRING / SUBSTR
    SELECT SUBSTRING('Hello world', 1, 4)         => Hell     selects chars 1 - 4
    SELECT SUBSTRING('Hello world', 7)            => world    selects 7 to the end
    SELECT SUBSTRING('Hello world', -3)           => rld      selects end back 3

  combining CONCAT AND SUBSTRING
    SELECT CONCAT
    (
      SUBSTRING(title, 1, 10), 
      '...'
    ) 
    AS 'short title' FROM books; 

  REPLACE
    SELECT REPLACE('<original string>', '<remove string>', '<replace string>') FROM <table name>

  REVERSE
    SELECT REVERSE('string')           // 'gnirts'

  CHAR_LENGTH
    SELECT CHAR_LENGTH(title);         // returns length of the title
    SELECT title, CHAR_LENGTH(title) AS 'title length' FROM books;

  UPPER & LOWER
    SELECT UPPER(title);               // returns upper case
    SELECT LOWER(title);               // returns lower case

  combining
    SELECT REVERSE(UPPER('hello'));    // 'OLLEH'

  DISTINCT                             // removes duplicates
    SELECT DISTINCT(title) FROM books;
    SELECT DISTINCT author_fname, author_lname FROM books;   // distinct with combine multiple columns

  ORDER BY
    SELECT author_lname FROM books ORDER BY author_lname DESC;
    SELECT author_lname, author_fname, year_relased FROM books ORDER BY 2 DESC;
      you can specify the aurgument number from the argument list instead of retyping the argument
        2 refers to author_fname in the argument list

    SELECT author_lname, author_fname, year_relased FROM books ORDER BY 2, 4 DESC;
      you can also sort by more than one column

  LIMIT  (goes at the very end)
    SELECT title FROM books LIMIT 5;      // returns the first 5 results
    SELECT title FROM books LIMIT 5, 4;   // returns rows 5 - 9 

  LIKE
    SELECT * FROM books WHERE title LIKE 'the';   // selects rows that have the title of 'the' (probably none) 
    SELECT * FROM books WHERE title LIKE '%the%'; // selects rows that have 'th' in the title
    SELECT * FROM books WHERE title LIKE 'th%';   // selects rows that start with 'th' in the title
    SELECT * FROM books WHERE title LIKE '%e';    // selects rows that end with 'e' in the title

      % means wildcard for something (or nothing)
      _ means exactly one character (any character)
        these can be escaped with \%, \_

    SELECT * FROM books WHERE title LIKE '__________';           // selects titles that have 10 characters
 
  REGEXP
    SELECT * FROM books WHERE title REGEXP '.{20}';  // any regex can be used

*******************************************************************************************
*aggregate functions

  COUNT
    SELECT COUNT(*) FROM books; 
    SELECT COUNT(DISTINCT author_lname) FROM books;
    SELECT COUNT(DISTINCT author_fname, author_lname) FROM books;
    SELECT COUNT(title) FROM books WHERE title LIKE '%the%';

  GROUP BY  // combines all the rows according to the type specified
    SELECT * FROM books GROUP BY author_lname     // returns each authors info combined into a distinct group
                                                  // other rows will only return information from the first occurence
    SELECT title, author_lname, COUNT(*) FROM books GROUP BY author_lname;     // count number of books by author
                                                  // allows you to use aggregate functions like count on a group of rows
    SELECT title, author_lname, COUNT(*) FROM books GROUP BY author_lname, author_fname; 
                                                  // count number of books by author full
                                                  // you don't have to use DISTINCT if you are using group by

  MIN MAX & subqueries
    SELECT MIN(released_year) FROM books;
    SELECT MAX(pages) FROM books;

      However... you can't do two columns and expect the title to match the pages
        SELECT MAX(pages), title FROM books;  
                 // this returns two queries the first is MAX(pages)  the second returns the all books 
                 // but there is only space for the first one so the first on the list is displayed 
                 // even though it dosen't match the max pages

      instead we have to use subquerries (note that subquries execute two select statements so they can be slower)
        SELECT title, pages 
        FROM books
        WHERE pages = (SELECT MAX(pages) FROM books);       // SELECT MAX... is the subquerie and executes first

      however you can do this without executing two SELECT queries using LIMIT
        SELECT title, pages 
        FROM books ORDER BY pages DESC LIMIT 1;

      you can also use group by to get the min of a super row (this is not the same as min of all books)
        SELECT author_lname, author_fname, Min(released_year) AS 'author first realsed year'
        FROM books
        GROUP BY author_lname, author_fname;

          however this is min realsed_year or each group of authors(super row) not all the books

