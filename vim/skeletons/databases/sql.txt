*******************************************************************************************
SQL
*******************************************************************************************
  start sql
  mysql -u root --password
  b*********

*open questions
*example queries with try sql 
*database general notes
*creating tables
*inserting data
*CRUD



*******************************************************************************************
*open questions

  IfNull()
  Round()
  Avg()
  Count()
  CASE
    WHEN THEN ''
    WHEN THEN ''
    ELSE ''
  end


*******************************************************************************************
example queries with try sql 

    play area and sample data
    https://www.w3schools.com/sql/trysql.asp?filename=trysql_op_or

  help;
  show databases;
  CREATE DATABASE <name>;
  DROP DATABASE <name>;
  USE <name>;
  SELECT database();         // show what database you are using

  SELECT * FROM products 
  ORDER BY price DESC;
  SUM(Quantity) AS "Quantity"
  WHERE
    SELECT * FROM users WHERE AGE >= 18;

  joins
    SELECT customerName,
           COUNT(*) AS 'number of orders'
    FROM customers
    INNER JOIN orders
          ON orders.customerID = customers.customerID
    GROUP BY customers.customerID;


    SELECT SupplierName, SUM(Price * Quantity) AS 'total quantity' FROM Products
    INNER JOIN OrderDetails
      ON Products.ProductID = OrderDetails.ProductID
    INNER JOIN Suppliers
      ON Products.SupplierID = Suppliers.SupplierID
    GROUP BY ProductName


*******************************************************************************************
*database general notes

  database vs database managment system (DBMS)

    A database is like a file on your computer that you can retrieve but is difficult to manipulate the data
    a database managment system is a an interface that allows you to manipulate the data in a database
      when people talk about databases they usually refer to the two together


  MySql vs SQL
    MySql is a DMBS that has different features as other DMBS (PostgreSql, SqLite etc)
      these differences can be related to speed, security, the size of the download, user permissions etc
    SQL is the lanauge used to talk to the database and used across all the relational DMBS

  Installing
    setting up MySql on CloudNine workspace
      three commands
        mysql-ctl start  installs and creates an empty database (sql runs constantly in the background)
        mysql-ctl stop   not usually necessary to stop
        mysql-ctl cli    runs an interactive shell
                         to exit the shell => eixt; quit; \q; ctrl-c

    installing on mac

    go to the website and install the latest version and copy and save the password for later
      root@localhost: mvo>Xx5(yCdo

    set the bash file path 
      $ export PATH=$PATH:/usr/local/mysql/bin

      $ open ./.bashrc
        (place in bash)
        echo 'export PATH=$PATH:/usr/local/mysql/bin' >> ~/.bash_profile

    entering and change the password

      $ mysql -u root --password
        enter instalation password

      (change the password in the command shell)
      ALTER USER 'root'@'localhost' IDENTIFIED BY 'b*********';


  
*******************************************************************************************
*creating tables

  table columns => headers
  table rows    => data rows

  creating tables 
    CREATE TABLE <table name>
      (
        column_name data_type,
        column_name data_type
      );


    SHOW TABLES;
    SHOW COLUMNS FROM <table name>;
    DESC <table name>;               // same as SHOW COLUMNS FROM, stands for describe
    DROP TABLE <table name>;


    data types
       INT(11)      => positive or negative numbers no decimals  (max value 4.2 billion)
       VARCHAR(100) => a string with specified length between 1 and 255 characters (can also be a string of numbers)
                       if more than 100 characters are input then only the first 100 will be stored

    NULL and NOT NULL
      NULL does not mean zero it means unknown
        if NULL is set to yes in the schema(this is by default), inputs are permited to be blank
        inputs left blank will evaluate to NULL in the database

      NOT NULL (prevents you from inserting NULL, empty insert will result in default only if it is changed from NULL)
        example 
        CREATE TABLE cats; ( name VARCHAR(20) NOT NULL,
            age INT NOT NULL
          );


    DEFAULT VALUES (value used when an insert is empty, it is set to NULL automatically but can be specified)
      CREATE TABLE cats; 
        (
          name VARCHAR(20) DEFAULT 'unnamed',
          age INT DEFAULT 99 
        );

    You may want to add both NOT NULL and DEFAULT '' if you want to prevent the insertion of NULL manually


    PRIMARY KEY

      example
        CREATE TABLE users 
        (
          user_id INT NOT NULL AUTO_INCREMENT,
          email VARCHAR(255) NOT NULL,
          password VARCHAR(255) NOT NULL,
          PRIMARY KEY(user_id)
        );

      alternate way to do primary key
        CREATE TABLE users
        (
          user_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
          email VARCHAR(255),
          password VARCHAR(255) NOT NULL
        );


*******************************************************************************************
*inserting data

  INSERT INTO <table name>(column_name1, column_name2)
  VALUES (value1, value2);

  INSERT INTO <table name>(column_name1, column_name2) 
  VALUES (value1, value2), 
         (value1, value2), 
         (value1, value2);

  warnings
    sometimes after inserting data you will recieve a warning
    this may happen if the data is too long (and was automatically truncated)
    to inspect the warning use 
    SHOW WARNINGS;


*******************************************************************************************
*CRUD

  CREATE => INSERT INTO <table name>(column_name) VALUES('value');
  READ   => SELECT
  UPDATE => UPDATE
  DELETE => DELETE

  *recomendation => before you update or delete run the where clause as practice 
                    to visually confirm you are going to select the correct data


  SELECT

    WHERE
      SELECT * FROM <table name> WHERE id=4;     // where arguments are not case sensitive
      SELECT * FROM users WHERE password=name;   // arguments can also be other columns 
      SELECT * FROM users WHERE user_id-5        // selects everything except user_id 5

    Aliasis
      SELECT user_id AS id FROM users;
     
  UPDATE

    UPDATE users SET name='unnamed'
    WHERE name=NULL;

  DELETE
    
    DELETE FROM users WHERE user_id=4;
    DELETE FROM users;                           // deletes all users without deleting the table


