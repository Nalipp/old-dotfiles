=============================================================
html
=============================================================

html skeleton
definition lists
css clearfix
css resets
aligning content
meida queries 
gradients
links (frameworks)
selectors
sprite sheet example
figcaptin

=============================================================
html skeleton

<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width">
		<title></title>
		<link rel="stylesheet" href="main.css"> 
	</head>
	<body>
	</body>
</html>


=============================================================
definition lists

<dl>
	<dt></dt>
	<dd>
	</dd>
</dl>

dl => definition list
dt => definition term
dd => definition description 
* you can add multiple definition terms to a definition description and vise versa
	inside the <dd></dd> you can also add <p> and other tags, but this is not allowed on <dt></dt>
	http://maxdesign.com.au/articles/definition/

=============================================================
css clearfix
	to prevent collapsing try to float first, otherwise...

	<parent element> {
		overflow: hidden;  // can cause unwanted scrollbars
	}

	<parent element>:after {
		display: block;
		clear: both;
		content: "";
	}

	.clearfix:after { 
		content: "."; 
		visibility: hidden; 
		display: block; 
		height: 0; 
		clear: both;
	}

	.group:before,
		.group:after {
	content: "";
	display: table;
		}
	.group:after {
	clear: both;
	}
	.group {
		*zoom: 1;
	}


	other options

	fake div
	<div style="clear: right;"></div>  // uses unsamantic html


	=============================================================
	css resets 

	examples: http://meyerweb.com/eric/tools/css/reset/
	http://necolas.github.io/normalize.css/
	http://cssreset.com/scripts/undohtml-css-tantek-celik/
	
	(add to the top of the css file)
	@import url("reset.css");

ul,ol { list-style: none; }
h1,h2,h3,h4,h5,h6,pre,code { font-size: 1em; }
ul,ol,li,h1,h2,h3,h4,h5,h6,pre,form,body,html,p,blockquote,fieldset,input,dl,dt,dd, figure, figcaption {
	margin: 0;
	padding: 0; }
a img,:link img,:visited img, fieldset { border: none; }
address { font-style: normal; }
header, section, article, nav, footer, hgroup, details, summary, figure, main { display: block; }
mark {
	color: inherit;
	background: transparent; }
abbr { border: none; }
/* summary::-webkit-details-marker { display: none; } */


=============================================================
aligning content
   
   text-align => used with inline block level elements and applied to the parent element
   margin auto => usted with blocks level elements and applied within the element (don't forget to specify the width)
   
   position: relative;
   left: 50%;
   transform: translateX(-50%);


=============================================================
meida queries 

	<meta name="viewport" content="width=device-width">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	
	@media (max-width: 875px) {
	}
	@media only screen and (min-width:480px) and (max-width: 640px)  {
	}


@media (min-width: 320px) and (max-width: 480px) {
}
@media (max-width: 600px) {
}
@media (max-width: 768px) {
}


	@media screen and (min-width:600px) {
		nav {
	float: left;
	width: 25%;
		}
		section {
			margin-left: 25%;
		}
	}
	@media screen and (max-width:599px) {
		nav li {
	display: inline;
		}
	}

=============================================================
gradients

background-color: #d2dcbe;
background-image: linear-gradient(to bottom, #d2dcbe, #fcfff5); 
background-repeat: no-repeat;

=============================================================
frameworks
	http://getskeleton.com/



=============================================================
selectors

+ adjacent selector => selects the first/next sibling
~ sibling select    => selects all siblings
> direct child      => selects child object from parent
:only-child         => selects an element if it is alone
:first-child        =>
:last-child         =>
:nth-child()        => select the counted occurance of a child
:nth-last-child()   => count the backward the number of types
:first-of-type      =>
:last-of-type       =>
:nth-of-type(2n+2)  => select all even elements (step + starting position)
:only-of-type       => select a type only if it is alone
:empty              => selects an element with no children
:not(element)       => select all matching elements except the specified element
[]                  => attribute
[type^="Sa"]        => select attributes of type where first two letters are "Sa"
[type$="to"]        => select attributes of type where last two letters are "to"
[type*="bo"]        => select attributes of type that contain "bo"



=============================================================
sprite sheet example


footer li a {
  display: block;
  width: 46px;
  height: 46px;
  overflow: hidden;
  background: transparent url("images/icons_social-media.png") 0 0 no-repeat;   
}

footer a.facebook {
  background-position: 0 -46px;
}

use 
  background-size: cover;
  to debug (shows the entire image inside the specified width and height)


=============================================================
figcaptin

<figure>
  <img></img>
  <figcaption></figcaption>
</figure>


=============================================================
